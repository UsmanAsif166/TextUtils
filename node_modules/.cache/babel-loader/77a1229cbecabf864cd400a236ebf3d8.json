{"ast":null,"code":"// import React, { useState } from \"react\";\n// export default function About() {\n//   const [btnText, setBtnText] = useState(\"Enable dark Mode\");\n//   let [myStyle, setMyStyle] = useState({\n//     backgroundColor: \"white\",\n//     color: \"black\",\n//   });\n//   const handleDarkClick = () => {\n//     if (myStyle.color === \"black\") {\n//       setMyStyle({\n//         backgroundColor: \"black\",\n//         color: \"white\",\n//       });\n//       setBtnText(\"Enable Light Mode\");\n//     } else {\n//       setMyStyle({\n//         backgroundColor: \"white\",\n//         color: \"black\",\n//       });\n//       setBtnText(\"Enable Dark Mode\");\n//     }\n//   };\n//   return (\n//     <div className=\"container\" style={myStyle}>\n//       <h2 className=\"my-3\">About Us</h2>\n//       <div className=\"accordion\" id=\"accordionPanelsStayOpenExample\">\n//         <div className=\"accordion-item\">\n//           <h2 className=\"accordion-header\" id=\"panelsStayOpen-headingOne\">\n//             <button\n//               style={myStyle}\n//               className=\"accordion-button\"\n//               type=\"button\"\n//               data-bs-toggle=\"collapse\"\n//               data-bs-target=\"#panelsStayOpen-collapseOne\"\n//               aria-expanded=\"true\"\n//               aria-controls=\"panelsStayOpen-collapseOne\"\n//             >\n//               Accordion Item #1\n//             </button>\n//           </h2>\n//           <div\n//             id=\"panelsStayOpen-collapseOne\"\n//             className=\"accordion-collapse collapse show\"\n//             aria-labelledby=\"panelsStayOpen-headingOne\"\n//           >\n//             <div className=\"accordion-body\" style={myStyle}>\n//               <strong>This is the first item's accordion body.</strong> It is\n//               shown by default, until the collapse plugin adds the appropriate\n//               classes that we use to style each element. These classes control\n//               the overall appearance, as well as the showing and hiding via CSS\n//               transitions. You can modify any of this with custom CSS or\n//               overriding our default variables. It's also worth noting that just\n//               about any HTML can go within the <code>.accordion-body</code>,\n//               though the transition does limit overflow.\n//             </div>\n//           </div>\n//         </div>\n//         <div className=\"accordion-item\">\n//           <h2 className=\"accordion-header\" id=\"panelsStayOpen-headingTwo\">\n//             <button\n//               style={myStyle}\n//               className=\"accordion-button collapsed\"\n//               type=\"button\"\n//               data-bs-toggle=\"collapse\"\n//               data-bs-target=\"#panelsStayOpen-collapseTwo\"\n//               aria-expanded=\"false\"\n//               aria-controls=\"panelsStayOpen-collapseTwo\"\n//             >\n//               Accordion Item #2\n//             </button>\n//           </h2>\n//           <div\n//             id=\"panelsStayOpen-collapseTwo\"\n//             className=\"accordion-collapse collapse\"\n//             aria-labelledby=\"panelsStayOpen-headingTwo\"\n//           >\n//             <div className=\"accordion-body\" style={myStyle}>\n//               <strong>This is the second item's accordion body.</strong> It is\n//               hidden by default, until the collapse plugin adds the appropriate\n//               classes that we use to style each element. These classes control\n//               the overall appearance, as well as the showing and hiding via CSS\n//               transitions. You can modify any of this with custom CSS or\n//               overriding our default variables. It's also worth noting that just\n//               about any HTML can go within the <code>.accordion-body</code>,\n//               though the transition does limit overflow.\n//             </div>\n//           </div>\n//         </div>\n//         <div className=\"accordion-item\">\n//           <h2 className=\"accordion-header\" id=\"panelsStayOpen-headingThree\">\n//             <button\n//               style={myStyle}\n//               className=\"accordion-button collapsed\"\n//               type=\"button\"\n//               data-bs-toggle=\"collapse\"\n//               data-bs-target=\"#panelsStayOpen-collapseThree\"\n//               aria-expanded=\"false\"\n//               aria-controls=\"panelsStayOpen-collapseThree\"\n//             >\n//               Accordion Item #3\n//             </button>\n//           </h2>\n//           <div\n//             id=\"panelsStayOpen-collapseThree\"\n//             className=\"accordion-collapse collapse\"\n//             aria-labelledby=\"panelsStayOpen-headingThree\"\n//           >\n//             <div className=\"accordion-body\" style={myStyle}>\n//               <strong>This is the third item's accordion body.</strong> It is\n//               hidden by default, until the collapse plugin adds the appropriate\n//               classes that we use to style each element. These classes control\n//               the overall appearance, as well as the showing and hiding via CSS\n//               transitions. You can modify any of this with custom CSS or\n//               overriding our default variables. It's also worth noting that just\n//               about any HTML can go within the <code>.accordion-body</code>,\n//               though the transition does limit overflow.\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//       <button className=\"btn btn-primary my-2 \" onClick={handleDarkClick}>\n//         {btnText}\n//       </button>\n//     </div>\n//   );\n// }","map":{"version":3,"names":[],"sources":["C:/Users/Administrator/Desktop/React Course/textutils/src/components/About.js"],"sourcesContent":["// import React, { useState } from \"react\";\r\n\r\n// export default function About() {\r\n//   const [btnText, setBtnText] = useState(\"Enable dark Mode\");\r\n//   let [myStyle, setMyStyle] = useState({\r\n//     backgroundColor: \"white\",\r\n//     color: \"black\",\r\n//   });\r\n\r\n//   const handleDarkClick = () => {\r\n//     if (myStyle.color === \"black\") {\r\n//       setMyStyle({\r\n//         backgroundColor: \"black\",\r\n//         color: \"white\",\r\n//       });\r\n//       setBtnText(\"Enable Light Mode\");\r\n//     } else {\r\n//       setMyStyle({\r\n//         backgroundColor: \"white\",\r\n//         color: \"black\",\r\n//       });\r\n//       setBtnText(\"Enable Dark Mode\");\r\n//     }\r\n//   };\r\n//   return (\r\n//     <div className=\"container\" style={myStyle}>\r\n//       <h2 className=\"my-3\">About Us</h2>\r\n//       <div className=\"accordion\" id=\"accordionPanelsStayOpenExample\">\r\n//         <div className=\"accordion-item\">\r\n//           <h2 className=\"accordion-header\" id=\"panelsStayOpen-headingOne\">\r\n//             <button\r\n//               style={myStyle}\r\n//               className=\"accordion-button\"\r\n//               type=\"button\"\r\n//               data-bs-toggle=\"collapse\"\r\n//               data-bs-target=\"#panelsStayOpen-collapseOne\"\r\n//               aria-expanded=\"true\"\r\n//               aria-controls=\"panelsStayOpen-collapseOne\"\r\n//             >\r\n//               Accordion Item #1\r\n//             </button>\r\n//           </h2>\r\n//           <div\r\n//             id=\"panelsStayOpen-collapseOne\"\r\n//             className=\"accordion-collapse collapse show\"\r\n//             aria-labelledby=\"panelsStayOpen-headingOne\"\r\n//           >\r\n//             <div className=\"accordion-body\" style={myStyle}>\r\n//               <strong>This is the first item's accordion body.</strong> It is\r\n//               shown by default, until the collapse plugin adds the appropriate\r\n//               classes that we use to style each element. These classes control\r\n//               the overall appearance, as well as the showing and hiding via CSS\r\n//               transitions. You can modify any of this with custom CSS or\r\n//               overriding our default variables. It's also worth noting that just\r\n//               about any HTML can go within the <code>.accordion-body</code>,\r\n//               though the transition does limit overflow.\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//         <div className=\"accordion-item\">\r\n//           <h2 className=\"accordion-header\" id=\"panelsStayOpen-headingTwo\">\r\n//             <button\r\n//               style={myStyle}\r\n//               className=\"accordion-button collapsed\"\r\n//               type=\"button\"\r\n//               data-bs-toggle=\"collapse\"\r\n//               data-bs-target=\"#panelsStayOpen-collapseTwo\"\r\n//               aria-expanded=\"false\"\r\n//               aria-controls=\"panelsStayOpen-collapseTwo\"\r\n//             >\r\n//               Accordion Item #2\r\n//             </button>\r\n//           </h2>\r\n//           <div\r\n//             id=\"panelsStayOpen-collapseTwo\"\r\n//             className=\"accordion-collapse collapse\"\r\n//             aria-labelledby=\"panelsStayOpen-headingTwo\"\r\n//           >\r\n//             <div className=\"accordion-body\" style={myStyle}>\r\n//               <strong>This is the second item's accordion body.</strong> It is\r\n//               hidden by default, until the collapse plugin adds the appropriate\r\n//               classes that we use to style each element. These classes control\r\n//               the overall appearance, as well as the showing and hiding via CSS\r\n//               transitions. You can modify any of this with custom CSS or\r\n//               overriding our default variables. It's also worth noting that just\r\n//               about any HTML can go within the <code>.accordion-body</code>,\r\n//               though the transition does limit overflow.\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//         <div className=\"accordion-item\">\r\n//           <h2 className=\"accordion-header\" id=\"panelsStayOpen-headingThree\">\r\n//             <button\r\n//               style={myStyle}\r\n//               className=\"accordion-button collapsed\"\r\n//               type=\"button\"\r\n//               data-bs-toggle=\"collapse\"\r\n//               data-bs-target=\"#panelsStayOpen-collapseThree\"\r\n//               aria-expanded=\"false\"\r\n//               aria-controls=\"panelsStayOpen-collapseThree\"\r\n//             >\r\n//               Accordion Item #3\r\n//             </button>\r\n//           </h2>\r\n//           <div\r\n//             id=\"panelsStayOpen-collapseThree\"\r\n//             className=\"accordion-collapse collapse\"\r\n//             aria-labelledby=\"panelsStayOpen-headingThree\"\r\n//           >\r\n//             <div className=\"accordion-body\" style={myStyle}>\r\n//               <strong>This is the third item's accordion body.</strong> It is\r\n//               hidden by default, until the collapse plugin adds the appropriate\r\n//               classes that we use to style each element. These classes control\r\n//               the overall appearance, as well as the showing and hiding via CSS\r\n//               transitions. You can modify any of this with custom CSS or\r\n//               overriding our default variables. It's also worth noting that just\r\n//               about any HTML can go within the <code>.accordion-body</code>,\r\n//               though the transition does limit overflow.\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//       <button className=\"btn btn-primary my-2 \" onClick={handleDarkClick}>\r\n//         {btnText}\r\n//       </button>\r\n//     </div>\r\n//   );\r\n// }\r\n"],"mappings},"metadata":{},"sourceType":"module"}