{"ast":null,"code":"// import React, { useState } from \"react\";\n// export default function TextForm(props) {\n//   const handleUpClick = () => {\n//     let newText = text.toUpperCase();\n//     setText(newText);\n//     props.showAlert(\"Converted to Upper Case!\", \"success\");\n//   };\n//   const handleLowClick = () => {\n//     let newText = text.toLowerCase();\n//     setText(newText);\n//     props.showAlert(\"Converted to Lower Case!\", \"success\");\n//   };\n//   const handlesliceClick = () => {\n//     let newText = text.slice(5, 10);\n//     setText(newText);\n//     props.showAlert(\"Slice Method Apply on index 5 to 10.\", \"success\");\n//   };\n//   const handleReplaceClick = () => {\n//     let newText = text.replace(\"Text\", \"Replace\");\n//     setText(newText);\n//     props.showAlert(`Replace only \"Text\" word.`, \"success\");\n//   };\n//   const handleConcatClick = () => {\n//     let newText = text + \" This String is Concat\";\n//     setText(newText);\n//     props.showAlert(\"Concat Method Apllied\", \"success\");\n//   };\n//   const handleClearClick = () => {\n//     let newText = \"\";\n//     setText(newText);\n//     props.showAlert(\"Clear Screen!\", \"success\");\n//   };\n//   const handleCaptClick = () => {\n//     /*Explanation:\n//     ^\\w : first character of the string\n//     | : or\n//     \\s\\w : first character after whitespace\n//     (^\\w|\\s\\w) Capture the pattern.\n//     g Flag: Match all occurrences.*/\n//     let newText = text.replace(/(^\\w|\\s\\w)/g, (m) => m.toUpperCase());\n//     setText(newText);\n//     props.showAlert(\"Capitalized!\", \"success\");\n//   };\n//   const handleCopy = () => {\n//     let text = document.getElementById(\"myBox\");\n//     text.select();\n//     navigator.clipboard.writeText(text.value)\n//     // props.showAlert(\"Copied\", \"success\");\n//   };\n//   const handleExtraSpaces = () => {\n//     let newText = text.split(/[ ]+/);\n//     setText(newText.join(\" \"));\n//     props.showAlert(\"Removed Extra Space from given Lines\", \"success\");\n//   };\n//   const handleOnChange = (event) => {\n//     setText(event.target.value);\n//   };\n//   let [text, setText] = useState(\"\");\n//   return (\n//     <React.Fragment>\n//       <div style={{ color: props.mode === \"dark\" ? \"white\" : \"black\" }}>\n//         <h2>{props.heading}</h2>\n//         <div className=\"  my-3\">\n//           <textarea\n//             style={{\n//               backgroundColor: props.mode === \"dark\" ? \"grey\" : \"light\",\n//               color: props.mode === \"dark\" ? \"white\" : \"black\",\n//             }}\n//             className=\"form-control\"\n//             value={text}\n//             onChange={handleOnChange}\n//             id=\"myBox\"\n//             rows=\"8\"\n//             placeholder=\"Enter Text here!\"\n//           ></textarea>\n//           <button className=\"btn btn-primary m-1\" onClick={handleUpClick}>\n//             Convert to UpperCase\n//           </button>\n//           <button className=\"btn btn-primary m-1\" onClick={handleLowClick}>\n//             Convert to lowerCase\n//           </button>\n//           <button className=\"btn btn-primary m-1\" onClick={handlesliceClick}>\n//             Slice\n//           </button>\n//           <button className=\"btn btn-primary m-1\" onClick={handleReplaceClick}>\n//             Replacing\n//           </button>\n//           <button className=\"btn btn-primary m-1\" onClick={handleConcatClick}>\n//             String concat\n//           </button>\n//           <button className=\"btn btn-primary m-1\" onClick={handleCaptClick}>\n//             Capitilized\n//           </button>\n//           <button className=\"btn btn-primary m-1\" onClick={handleCopy}>\n//             Copy Text\n//           </button>\n//           <button className=\"btn btn-primary m-1\" onClick={handleExtraSpaces}>\n//             Remove Extra Spaces\n//           </button>\n//           <button className=\"btn btn-primary m-1\" onClick={handleClearClick}>\n//             Clear\n//           </button>\n//         </div>\n//       </div>\n//       <div style={{ color: props.mode === \"dark\" ? \"white\" : \"black\" }}>\n//         <h2>Summary</h2>\n//         <p>\n//           {/* Total words are: {text.length > 0 ? text.trim().split(\" \").length : 0}{\" \"} */}\n//           Total words are: {text.split(\" \").filter((element)=>{return element.length !== 0}).length}\n//           Total Character: {text.length}\n//         </p>\n//         <p>\n//           Taking Total time to read in minutes: {0.008 * text.split(\" \").length}\n//         </p>\n//         <h3>Preview</h3>\n//         <p>{text.length > 0 ? text : \"Enter Something above in TextBox!\"}</p>\n//       </div>\n//     </React.Fragment>\n//   );\n// }","map":{"version":3,"names":[],"sources":["C:/Users/Administrator/Desktop/React Course/textutils/src/components/TextForm.js"],"sourcesContent":["// import React, { useState } from \"react\";\r\n\r\n// export default function TextForm(props) {\r\n//   const handleUpClick = () => {\r\n//     let newText = text.toUpperCase();\r\n//     setText(newText);\r\n//     props.showAlert(\"Converted to Upper Case!\", \"success\");\r\n//   };\r\n//   const handleLowClick = () => {\r\n//     let newText = text.toLowerCase();\r\n//     setText(newText);\r\n//     props.showAlert(\"Converted to Lower Case!\", \"success\");\r\n//   };\r\n//   const handlesliceClick = () => {\r\n//     let newText = text.slice(5, 10);\r\n//     setText(newText);\r\n//     props.showAlert(\"Slice Method Apply on index 5 to 10.\", \"success\");\r\n//   };\r\n//   const handleReplaceClick = () => {\r\n//     let newText = text.replace(\"Text\", \"Replace\");\r\n//     setText(newText);\r\n//     props.showAlert(`Replace only \"Text\" word.`, \"success\");\r\n//   };\r\n//   const handleConcatClick = () => {\r\n//     let newText = text + \" This String is Concat\";\r\n//     setText(newText);\r\n//     props.showAlert(\"Concat Method Apllied\", \"success\");\r\n//   };\r\n//   const handleClearClick = () => {\r\n//     let newText = \"\";\r\n//     setText(newText);\r\n//     props.showAlert(\"Clear Screen!\", \"success\");\r\n//   };\r\n\r\n//   const handleCaptClick = () => {\r\n//     /*Explanation:\r\n\r\n//     ^\\w : first character of the string\r\n//     | : or\r\n//     \\s\\w : first character after whitespace\r\n//     (^\\w|\\s\\w) Capture the pattern.\r\n//     g Flag: Match all occurrences.*/\r\n\r\n//     let newText = text.replace(/(^\\w|\\s\\w)/g, (m) => m.toUpperCase());\r\n//     setText(newText);\r\n//     props.showAlert(\"Capitalized!\", \"success\");\r\n//   };\r\n\r\n//   const handleCopy = () => {\r\n//     let text = document.getElementById(\"myBox\");\r\n//     text.select();\r\n//     navigator.clipboard.writeText(text.value)\r\n//     // props.showAlert(\"Copied\", \"success\");\r\n//   };\r\n\r\n//   const handleExtraSpaces = () => {\r\n//     let newText = text.split(/[ ]+/);\r\n//     setText(newText.join(\" \"));\r\n//     props.showAlert(\"Removed Extra Space from given Lines\", \"success\");\r\n//   };\r\n\r\n//   const handleOnChange = (event) => {\r\n//     setText(event.target.value);\r\n//   };\r\n\r\n//   let [text, setText] = useState(\"\");\r\n\r\n//   return (\r\n//     <React.Fragment>\r\n//       <div style={{ color: props.mode === \"dark\" ? \"white\" : \"black\" }}>\r\n//         <h2>{props.heading}</h2>\r\n\r\n//         <div className=\"  my-3\">\r\n//           <textarea\r\n//             style={{\r\n//               backgroundColor: props.mode === \"dark\" ? \"grey\" : \"light\",\r\n//               color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n//             }}\r\n//             className=\"form-control\"\r\n//             value={text}\r\n//             onChange={handleOnChange}\r\n//             id=\"myBox\"\r\n//             rows=\"8\"\r\n//             placeholder=\"Enter Text here!\"\r\n//           ></textarea>\r\n\r\n//           <button className=\"btn btn-primary m-1\" onClick={handleUpClick}>\r\n//             Convert to UpperCase\r\n//           </button>\r\n\r\n//           <button className=\"btn btn-primary m-1\" onClick={handleLowClick}>\r\n//             Convert to lowerCase\r\n//           </button>\r\n\r\n//           <button className=\"btn btn-primary m-1\" onClick={handlesliceClick}>\r\n//             Slice\r\n//           </button>\r\n\r\n//           <button className=\"btn btn-primary m-1\" onClick={handleReplaceClick}>\r\n//             Replacing\r\n//           </button>\r\n\r\n//           <button className=\"btn btn-primary m-1\" onClick={handleConcatClick}>\r\n//             String concat\r\n//           </button>\r\n\r\n//           <button className=\"btn btn-primary m-1\" onClick={handleCaptClick}>\r\n//             Capitilized\r\n//           </button>\r\n\r\n//           <button className=\"btn btn-primary m-1\" onClick={handleCopy}>\r\n//             Copy Text\r\n//           </button>\r\n//           <button className=\"btn btn-primary m-1\" onClick={handleExtraSpaces}>\r\n//             Remove Extra Spaces\r\n//           </button>\r\n\r\n//           <button className=\"btn btn-primary m-1\" onClick={handleClearClick}>\r\n//             Clear\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n//       <div style={{ color: props.mode === \"dark\" ? \"white\" : \"black\" }}>\r\n//         <h2>Summary</h2>\r\n//         <p>\r\n//           {/* Total words are: {text.length > 0 ? text.trim().split(\" \").length : 0}{\" \"} */}\r\n//           Total words are: {text.split(\" \").filter((element)=>{return element.length !== 0}).length}\r\n//           Total Character: {text.length}\r\n//         </p>\r\n//         <p>\r\n//           Taking Total time to read in minutes: {0.008 * text.split(\" \").length}\r\n//         </p>\r\n//         <h3>Preview</h3>\r\n//         <p>{text.length > 0 ? text : \"Enter Something above in TextBox!\"}</p>\r\n//       </div>\r\n//     </React.Fragment>\r\n//   );\r\n// }\r\n"],"mappings},"metadata":{},"sourceType":"module"}